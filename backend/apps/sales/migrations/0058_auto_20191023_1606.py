# Generated by Django 2.2.1 on 2019-10-23 21:06
from django.contrib.contenttypes.models import ContentType
from django.db import migrations
from easy_thumbnails.alias import aliases
from easy_thumbnails.files import get_thumbnailer

FAVORITE = 14
SUBMISSION_CHAR_TAG = 17
SUBMISSION_ARTIST_TAG = 21
COMMENT = 4

def gen_subjective_thumbnails(cls, field_name, asset):
    """
    Gen the thumbnails for an asset as if it were a ThumbnailField on another model. This allows us to use multiple
    thumbnail specifications for one asset, and one asset for multiple model instances.
    """
    ref_name = f'{cls._meta.app_label}.{cls.__name__}.{field_name}'
    all_options = aliases.all(ref_name, include_global=True)
    if not all_options:
        return
    try:
        asset.file.file
    except FileNotFoundError:
        print(f"WARNING: couldn't find file referenced by {asset.file}")
        return
    thumbnailer = get_thumbnailer(asset.file)
    for key, options in all_options.items():
        options['ALIAS'] = key
        thumbnailer.get_thumbnail(options)


def create_submissions(apps, schema):
    Product = apps.get_model('sales.Product')
    Submission = apps.get_model('profiles.Submission')
    Subscription = apps.get_model('lib.Subscription')
    image_type = ContentType.objects.get_for_model(model=Subscription)
    for product in Product.objects.all():
        if product.file is None:
            print(f"WARNING: No reference found for {product.id}")
            continue
        try:
            product.file.file
        except FileNotFoundError:
            print(f"WARNING: couldn't find file referenced by {product.file}")
            continue
        submission = Submission.objects.create(
            owner=product.user,
            created_on=product.created_on,
            file=product.file,
            preview=product.preview,
            title=f'Sample for {product.name}'[:100],
            caption='Autogenerated From Product Sample',
            private=product.hidden,
            rating=product.rating,
        )
        submission.artists.add(product.user)
        # This may not be perfect, but it should prevent blacklisted items from showing to people who didn't want them.
        submission.tags.add(*product.tags.all())
        Subscription.objects.bulk_create(
            [Subscription(
                subscriber=submission.owner,
                content_type_id=image_type.id,
                object_id=submission.id,
                type=sub_type,
            ) for sub_type in [FAVORITE, SUBMISSION_CHAR_TAG, SUBMISSION_ARTIST_TAG, COMMENT]],
            ignore_conflicts=True
        )
        product.samples.add(submission)
        product.primary_submission = submission
        product.save()
        if submission.file:
            gen_subjective_thumbnails(Submission, 'file', submission.file)
        if submission.preview:
            gen_subjective_thumbnails(Submission, 'preview', submission.file)
    for submission in Submission.objects.filter(order__isnull=False):
        if submission.artists.filter(id=submission.order.product.user.id).exists():
            submission.order.product.samples.add(submission)


def remove_submissions(apps, schema):
    Product = apps.get_model('sales.Product')
    for product in Product.objects.filter(primary_submission__isnull=False):
        submission = product.primary_submission
        product.rating = submission.rating
        product.file = submission.file
        product.preview = submission.preview
        product.save()
        submission.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0057_auto_20191023_1605'),
        ('lib', '0025_populate_assets'),
    ]

    operations = [
        migrations.RunPython(create_submissions, reverse_code=remove_submissions)
    ]
